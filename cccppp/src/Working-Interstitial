										What we are trying to achieve through cccppp                                                                 
                                                                               ______________________________________________
                                                                                                                                                              
                            Let us take binary expression arr[0] as example
                            This expression will be represented in AST as :---------+
                                                                                    |
                                                         			    |
                                                         			    v
                                                                          +--------------------+
                                                         	+---------|        [ ]         |--------+
                                                                |	  +--------------------+	|
                                                                |                                       |
                                                                |                                       |
                                                                v                                       v
                                                      +--------------------+                  +--------------------+
                                                      |        arr         |                  |         0          |
                                                      +--------------------+                  +--------------------+
                                                         				    
                                     Now we want to translate this binary expression (Specifically ArraySubscript Expressions for now) 
                                                        
              +---------------------------------------------------+        	             +-------------------------------------------------------------------------------+
              |(*) Binary Expression before translation  : arr[0] | -----------------------> |(*) Binary Expression after translation : __primop_subscript<int * >()(arr, 0) |
              +---------------------------------------------------+        		     +-------------------------------------------------------------------------------+
                                                       					
                                                        
                                                     +-------------------------------------------------------------------------------+
                                                     |                                                                               |
                                                +----|-------------------------------------------------------------+                 |
                                                |    |							           |	             |  
                       			        |    |							           |                 |
                       			        ^    ^							           |                 |
                       			        |    |                                                             v    	     v                
                                       +--------------------+						   	+-----+-----+-----+-----+
      (AST)                  +---------|        [    ]      |--------+					        |  [  |arr  |  0  |  ]  |  
                             |	       +--------------------+	     | 					   	|     |	    |     |     |   (Output Buffer)
                             |                                       |					   	+-----+-----+-----+-----+
                             |                                       |					   	|     |  ^  |  ^  |     |
                             v                                       v					        |     |  |  |  |  |     |
                  +--------------------+                   +--------------------+		       	   	|     |  |  |  |  |     |
                  |        arr         |                   |         0          |			    	+-----+--|--+--|--+-----+
                  +--------------------+                   +--------------------+                   	                 |     |
                                    |                                     |                                              |     |
                                    |                                     |                                              |     |
                                    |                                     +----------------------------------------------|-----+
                                    |									   		 |
                                    +------------------------------------------------------------------------------------+                                                                               
                                                                     
                                                                    
                                                                      | Current Translation Done by Interstitial.cpp| 
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   When we take:
|   Optional<SourceRange> leftIntersticeRange = mkStartLengthRange(leftIntersticeStart, leftIntersticeLength);
|
|   and replace with this range:
|   if (leftIntersticeRange) TheRewriter.ReplaceText(
|      leftIntersticeRange->getBegin(),
|      TheRewriter.getRewrittenText(*leftIntersticeRange).length(),
|      leftInterstice
|   ); 
+__________________________________________________________________________________+___________________________________________________________________________________________________________________+
|      What we get is this :                                                       |                                                                             				       |
|      Let us take binary expression: __s[__i]                                     |                                                            						       |
|                                                                                  |                                        How Interstices Look     						       |
|      ----------Outer Expression -------------                                    |                                       ----------------------                                                      |
|      |                                      |                                    |                 **Ignore the spaces in the expression (added space to visualize better)**                         |
|      v				      v                                    |                                                __s [ __i ]                                                        |
|       ___primop_subscript<int * >()(__s, __i)                                    |                                              ^^    ^     ^                                                        |
|       ^                               ^  ^ ^                                     |                                              ||    ||    ||                                                       |
|       |                               |  | |                                     |   LI : Left Interstices                      LI    MI    RI                                                       |
|       |_______________________________|  |_|                                     |   RI : Right Interstices                                                                                          |
|	eLeft                              eRight -> '__i'                         |   MI : Middle Interstices                                                                                         |
|	 |			                                                   |                                                                                                                   |
|	 v                                                                         |   In Ideal Case We are getting "MI Start == MI End" and "RI Start == RI End"                                      |
|    '___primop_subscript<int * >()(__s'                                           |   But in cases where there is actual space like arr [ 0 ] then we are getting                                     |
|                                                                                  |                                                                                                                   |
|                                                                                  |   MI Start = [        RI Start = ]                                                                                |
|                                                                                  |   MI End = ""         RI End = ]                                                                                  |
|                                                                                  |                                                                                                                   |
|                                                                                  | MI End is not '['(have to figure out, Whereas RI End is ok) now the twist is the final whole expression we get is:|
|                                                                                  |                                   `__primop_subscript<int * >()(arr ,  0 )'                                       |
|                                                                                  |                                                                         |                                         |
|                                                                                  |                                                                         v                                         |
|                                                                                  |                                                              Why is there ' ' between ?                           |
+----------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------+



Good Enough to Push into Main 
But We should open Issue to solve this particular section



_________________________________________________________________________________________________________________________________________________________________________________________________________


Q) Why SourceLocation is 32 bit ?
 
- The 'SourceLocation' class is important for tracking positions within the source code, particularly for various stages of compilation and analysis.
This class is designed to be (32 bits in size) to ensure efficiency and memory saving. 

ID (32 bits): This is the core component of a SourceLocation. It contains the actual encoded value that represents the position within the source code. This value is a combination of bits that encode various pieces of information, including the file ID, offset within the file, and whether it's a regular source location or a macro expansion location.

Here's a break down what this 32-bit value represents using a diagram


+--------------------------------------------------------------------+
|                                                                    |
|                       SourceLocation                               |             * Bit-31 : (Macro ID Bit) Indicates whether it's regular source location or macro expansion location 
+--------------------------------------------------------------------+             * Bit-30 to 0: Offset within the file or macro expansion (these bits store the actual position information)
|                                                                    | 
|                     Macro ID Bit (Bit 31)                          |
+--------------------------------------------------------------------+            [*] Macro Expansion Location:  Specific point in the source code where a macro has been expanded. 
|                                                                    |
|              Offset within the file or macro expansion (Bit 30-0)  |
|            (These bits store actual position information)          |
|                                                                    |
|                                                                    |
+--------------------------------------------------------------------+

SourceLocation Overflow
-----------------------
There's a LLVM discussion I found which talks about overflow in SourceLocation.
(https://discourse.llvm.org/t/rfc-clang-sourcelocation-overflow/57541)

Basically when a large file is included multiple times using #include directives, it can lead to an overflow issue with the SourceLocation values in Clang. The repeated inclusions cause the cumulative size of included files to exceed the capacity that can be represented by the 32-bit SourceLocation, resulting in an overflow problem. This overflow can impact how the compiler tracks positions within the source code and may lead to unexpected behavior or errors. 

There's another discussion on why SourceLocation needs to be 64 bit
(https://discourse.llvm.org/t/macro-performance-lexer-and-sourcemanager/65713/6)


There is also a point that mentions this as current limitation in Clang's Compiler User Manual:
Some source locations are not displayed correctly. The front end has a more detailed source location tracking than the locations included in the debug info (e.g., the front end can locate code inside macro expansions). However, the locations used by -Rpass are translated from debug annotations. That translation can be lossy, which results in some remarks having no location information.
(https://intel.github.io/llvm-docs/clang/UsersManual.html)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

AddInsertDelta (Inside Rewrite.cpp of Clang Directory)
------------------------------------------------------

/// AddInsertDelta - When an insertion is made at a position, this
  /// method is used to record that information.
  void AddInsertDelta(unsigned OrigOffset, int Change) {
    return Deltas.AddDelta(2*OrigOffset, Change);
  }
  
AddDelta (Inside DeltaTree.cpp of Clang Rewrite Directory)
---------------------------------------------------------
 /// this method is used to record that info.  It inserts a delta of 'Delta'
/// into the current DeltaTree at offset FileIndex.
void DeltaTree::AddDelta(unsigned FileIndex, int Delta) {
  assert(Delta && "Adding a noop?");
  DeltaTreeNode *MyRoot = getRoot(Root);
 
  DeltaTreeNode::InsertResult InsertRes;
  if (MyRoot->DoInsertion(FileIndex, Delta, &InsertRes)) {
    Root = new DeltaTreeInteriorNode(InsertRes);
#ifdef VERIFY_TREE
    MyRoot = Root;
#endif
  }
  
 
								        +_____________________+
									|Overview of DeltaTree|
+-----------------------------------------------------------------------+---------------------+-----------------------------------------------------------------------------------+
|DeltaTree : Maintains information about how source code changes affect the positions within a source code buffer. It tracks changes such as insertions and deletions of code and |
|allows fast lookups to determine the accumulated delta at any specfic file offset                                                                                                |
|                                    																		  |
|					                                  DeltaTree (Root)										          |
|					                                        | 												  |
|			                                   +-----------+-----------+----------+---------+                                                                         |
|			                                   |           |           |          |         | 	                                                                  |
|  		                                           v           v           v          v         v		                                                          |
|  		                                        Node A       Node B       Node C    Node D   Node E	                                                                  |
|  		                                           |           |           |          |         |		                                                          |
|  		                                           v           v           v          v         v		                                                          |
|  		                                        Value 1      Value 2     Value 3    Value 4  Value 5		                                                          |
|  		      																				  |
|In this low-level representaion:																		  |
|(*) 'DeltaTree' : The top-level structure representing the entire 'DeltaTree'.													  |
|(*) 'Node A', 'Node B', 'Node C', 'Node D', 'Node E' : Interior Nodes in B-Tree structure											  |
|(*) 'Value1, Value2, Value3, Value4, Value5: Leaf nodes (or final partitions) that store SourceDelta values.									  |
|																						  |
|-Each interior node (e.g 'Node A' to 'Node E') may have multiple child nodes and values. I have shown only one child node and one value per interior node for sake of simplicity |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


 Key Concepts:
 -------------
 
 (*) Delta - a delta represents how the source code at specific file location has been modified (added or deleted). Deltas are recorded as 'SourceDelta' objects with file location and delta values.
 (*) Full Delta - Each Node in the tree maintains a 'Full Delta', which is accumulated delta of all the values or deltas within the node and it's children. 
                  This allows for quick retrieval of the total delta for a subtree.
 (** Important **) Delta's can be positive or negative)
   
 How it works:
 -------------
 
 (*) Intilisation: The 'DeltaTree' is intilised with empty root node.
 (*) AddDeltaFunction: When a change is made to the source code (e.g Insertion or Deletion), the 'AddDelta' function is called. 
 		       This function records rhe change(delta) at a specific file offset. If necessary, it may split nodes in tree to maintain B-Tree structure.
 (*) DeltaTreeNodeSplit: When a node becomes full (reaches a certain capacity), it is split into two nodes, this ensures that B-Tree remains balanced.
 (*) Querying Accumulated Delta: The 'getDeltaAt' function is used to query the accumulated delta at specific file offset. 
                                 It traverses the tree, taking into account the delta stored in each node and it's children. 
                                 
                                 
                                 
 here's an simple example to understand how DeltaTree works--|
 							     v
 Let us take a source code and see how insertion and deletion are recorded as delta:
 		+---------------------+
 		|Original Source Code:|
 		|---------------------|
 		|		      |
 		|int main() {         |
 		|    int a = 10;      |
 		|    return 0;	      |
 		|}		      |
 		+---------------------+
 		
 Case 1: Insertion
 -----------------
 	let's insert a piece of code at specific location (e.g. after the declaration of a)
 	
 	int b = 2;
 	
 	Here's how the change will be represented :
 		1) Delta Representation :-> Delta: FileLoc = 29 (position after 'int a = 10;'), Delta = +13
 		 	(*) FileLoc = The file location where the insertion occurs(character position is taken)
 		 	(*) Delta = The change in file location due to insertion (In this example +13 characters)
 		 	
 		2) DeltaTree Modification 
 			Tree After Insertion:---|
 						v
 					      [Root]	
 					     /      \
 					    /	     \
 			        [Leaf Node A]        [Leaf Node B]
 			        (FileLoc: 0) 	     (FileLoc: 29)  ----------------------------------------------------------------+
 			          /   |   \             /   |   \								    |
 			       ...   ...   ...	     ...   ...   ...								    |
 			       													    |
 	          So what's happening in this case is:										    +---------->|
 	          	- The root node has two leaf nodes.											|
 	          	- 'Leaf Node A' represents the original code.										| If we use function 'getDeltaAt' with specfic position
 	          	- 'Lead Node B' represents the inserted code.										| we get to see this:	
 	          	- The root node now tracks the accumulated delta of both nodes. (It achieves this by using function 'getDeltaAt')	| 
 	          	- The insertion causes the split at the root node to maintain balance in bst tree.					| (*) getDeltaAt(10) -> would return '0' as because
 	          																|	 no changes occured before this position.
  Case 2: Deletion                   														| (*) getDeltaAt(29) -> would return '13' as because
  ----------------                                                                                                                              |        we inserted 13 characters at position 29.
 	let's delete a piece of code from specific location (e.g. the declaration of a)								| (*) getDeltaAt(16) -> would return '-13' as because 
 																		|        we deleted 13 characters at position 16.
 	Here's how the change will be represented :												|	 
 		1) Delta Representation :-> Delta: FileLoc = 16 (position of 'int a = 10;'), Delta = -13					|
 		 	(*) FileLoc = The file location where the deletion occurs(character position is taken)			     +--------->|
 		 	(*) Delta = The change in file location due to deletion (In this example -13 characters)                     |
 		 	                                                                                                             |
 		2) DeltaTree Modification                                                                                            |
 			Tree After Deletion :---|                                                                                    |
 						v                                                                                    |
 					      [Root]	                                                                             |
 					     /      \                                                                                |
 					    /	     \                                                                               |
 			        [Leaf Node A]        [Leaf Node B]		                                                     |
 			        (FileLoc: 0) 	     (FileLoc: 13)  -----------------------------------------------------------------+
 			          /   |   \             /   |   \
 			       ...   ...   ...	     ...   ...   ...
 			       
 	          So what's happening in this case is:
 	          	- The root node has two leaf nodes.
 	          	- 'Leaf Node A' represents the original code.
 	          	- 'Lead Node B' represents the deleted code.
 	          	- The root node now tracks the accumulated delta of both nodes. (It achieves this by using function 'getDeltaAt')
 	          	- The insertion causes the split at the root node to maintain balance in bst tree.
 	          	
 	          	
 	          	
Notes on functions : getDecomposedLoc, getSpellingLoc, getMappedOffset, insertText, getRewrittenText.

getDecomposedLoc:
----------------
	takes a SourceLocation object called Loc as its input and returns a std::pair containing two values: a FileID and an unsigned integer.

	Here's what the function does step by step:

    	 1) It starts by calling the getFileID function with the Loc argument to obtain the FileID corresponding to the provided source location.

         2) Next, it calls the getSLocEntryOrNull function with the obtained FileID to get a pointer (Entry) to the source location entry associated with that file.

         3) If the Entry pointer is nullptr (i.e., if there is no entry found for the given FileID), the function returns a std::pair with an empty FileID and an offset of 0. This suggests that the provided SourceLocation does not have a valid mapping to a file.

         4) If an Entry is found, it calculates the offset of the provided SourceLocation within the file by subtracting the offset of the Entry (obtained using Entry->getOffset()) from the offset of the Loc (obtained using Loc.getOffset()). It then returns a std::pair with the FileID and the calculated offset.

 	          	
getSpellingLoc:
---------------
	 takes a SourceLocation object called Loc as its input and returns a SourceLocation.

	 Here's what the function does:

          1) It checks whether the Loc is associated with a file (i.e., whether it has a valid FileID). This is done using the Loc.isFileID() function call.

          2) If the Loc is associated with a file (i.e., Loc.isFileID() returns true), it means that the Loc itself is the spelling location, and there's no need for further processing. In this case, the function simply returns the input Loc as-is.

          3) If the Loc is not associated with a file (i.e., Loc.isFileID() returns false), it implies that the Loc represents an expansion location (e.g., a macro expansion). In this case, the function delegates the task of finding the spelling location to the getSpellingLocSlowCase function by passing Loc as an argument. This slow case handling typically involves traversing through the expansion history to determine the original source location or spelling location.
          
getMappedOffset:
----------------

why 2*origoffset ? (I don't know whether this answer which I came up analyzing the function is correct :'( )

The getMappedOffset function takes an offset into the original SourceBuffer and returns the corresponding offset in the RewriteBuffer. The AfterInserts flag indicates whether the offset is after any inserted text.

The 2*OrigOffset term is used to take into account the fact that each insert operation in the RewriteBuffer shifts all subsequent offsets by one. So, if the original offset is 10 and there is one insert operation, the corresponding offset in the RewriteBuffer will be 11.

overall--v

AfterInserts: If this boolean flag is true (which it is by default), it would add 1 to the 2*OrigOffset result. This would effectively move the position one step further, to be "after" any inserts.

OrigOffset: Adding the original offset back at the end adjusts for the total shift that has occurred due to rewrites before this position.


insertText:
-----------

        It takes three parameters:
        	* OrigOffset: An unsigned integer representing the original offset where the insertion should occur.
        	* Str: A StringRef containing the text to be inserted.
        	* InsertAfter: A boolean flag indicating whether the insertion should occur after the original offset (true) or at the original offset (false).

          1) The function first checks if the Str to be inserted is empty. If it is empty, there's nothing to insert, so the function exits early without making any changes.

          2) It calculates the RealOffset by calling the getMappedOffset function with the OrigOffset and InsertAfter flags. This calculation adjusts the original offset to reflect any previous insertions or modifications made in the buffer.

          3) The function then uses the RealOffset to insert the characters from Str into the Buffer at the specified position.

          4) Finally, it calls AddInsertDelta to record a delta value that represents the change made by this insertion. This delta value is used to keep track of how future changes should be offset correctly within the buffer.
          
          
getRewrittenText:
-----------------

	    It takes a CharSourceRange named Range as its input parameter. This Range represents the character source range for which rewritten text is desired.

    		1) The function first checks whether the beginning and end of the Range are rewritable by calling the isRewritable function for both the start and end of the range. If either the start or end is not rewritable, it returns an empty string (indicating that the requested range cannot be rewritten).

    		2) It then proceeds to obtain the file IDs and offsets for both the start and end of the Range. This involves calling the getLocationOffsetAndFileID function, which appears to determine the file and offset information for a given source location.

    		3) It checks whether the StartFileID and EndFileID are the same. If they are not, it returns an empty string because the start and end of the range belong to different buffers.

    		4) If both the start and end are in the same buffer, the function checks if any rewrites have been made to this buffer by searching for the buffer in the RewriteBuffers map. If no rewrite has been made, it retrieves the text from the original source using the SourceMgr (Source Manager) and adjusts the end offset if the Range represents a token range. The function then returns the corresponding string.

    		5) If there have been rewrites to the buffer, it retrieves the RewriteBuffer for the buffer in question from the RewriteBuffers map.

    		6) It adjusts the start and end offsets using the getMappedOffset function, which presumably adjusts the offsets to account for previous insertions or changes made in the buffer.

    		7) Again, it adjusts the end offset if the Range represents a token range.

    		8) The function then iterates over the RewriteBuffer to retrieve the rewritten text within the specified range by advancing the iterators accordingly.

    		9) Finally, it constructs and returns a std::string using the retrieved iterators to obtain the rewritten text within the specified range.


